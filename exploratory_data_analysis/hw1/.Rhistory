install.packages("rJava")
install.packages("rJava")
library("swirl")
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf = read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
hed(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-5:-20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500)
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.ns(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, county, desc(r_version), ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
cran3 <- mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size, size_mb + 1000)
mutate(cran3, correct_size = size_mb + 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
tbl_df(mydf)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
?n
submit()
submit()
tbl
tbl()
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
arrange(top_counts, count)
arrange(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique < 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
swirl()
swirl()
swirl()
list.files(file.path(find.package("swirl"), "user_data"))
swirl()
library(httr)
set_config(use_proxy(url="10.3.100.207",port=8080))
swirl()
Sys.unsetenv("http_proxy")
swirl()
library(bitops)
library(RCurl)
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
library(swirl)
swirl()
httr::GET('https://gdc-api.nci.nih.gov/status')
httr::GET('https://gdc-api.nci.nih.gov/status') Response [https://gdc-api.nci.nih.gov/status] Date: 2017-03-05 14:59 Status: 200 Content-Type: application/json Size: 110 B { "commit": "9f568bab7dd61f17e24e8c9fa6e62235233d369e", "status": "OK", "tag": "1.5.0", "version": 1
httr::GET('https://gdc-api.nci.nih.gov/status')
library("swirl")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, sex, class)
res <- gather(students2, sex_class, male_1, male_2)
res <- gather(students2, sex_class, count, -grade)
res
?seperate
?separate
separate(res, sex_class, c("sex","class"))
submit()
students3
submit()
submit()
submit
submit()
?gather
submit()
submit
submit()
students3
submit
submit()\
submit()
submit()
?spread
submit
()
submit()
submit()
submit
submit()
submit()
submit()
library(readr)
parse_number("class5")
?mutate
submit
submit()
submit()
submit()
students3
students4
submit()
?gather
submit()
submit()
submit()
submit()
students5
passed
failed
mutate(passed, passed, TRUE)
mutate(passed, status, "passed")
mutate(passed, status="passed")
passed <- mutate(passed, status="passed")
failed <- mutate(failed, status="failed")
bind_rows(passed, failed)
sat
submit()
?seperate
?separate
?spread
?separate
submit()
submit()
submit()
submit()
sat
submit()
?group_by
submit
submit()
read.csv("/home/deapfreze/Desktop/data1.csv")
data <- read.csv("/home/deapfreze/Desktop/data1.csv")
names(data)
strsplit(names(data), 'wgtp')
data <- read.csv("/home/deapfreze/Desktop/data2.csv")
head(data)
numbers <- gsub(data$X.3, ",", "")
numbers <- gsub(",", "", data$X.3)
numbers
numbers <- int(numbers)
numbers <- as.numeric(numbers)
numbers
numbers <- numbers[!is.na(numbers)]
numbers
avg(numbers)
avgerage(numbers)
mean(numbers)
data
print(data[100:300])
print(data[100:300,])
mean(numbers)
length(numbers)
numbers <- gsub(",", "", data$X.3[5:194])
numbers
len(numbers)
length(numbers)
numbers <- as.numeric(numbers)
numbers
mean(numbers)
data$X.3
data3 <- read.csv("/home/deapfreze/Desktop/data3.csv")
head(data3)
?merge
data4 <- merge(data, data3, by.x=X, by.y=CountryCode)
head(data)
data4 <- merge(data, data3, by.x=data$X, by.y=data3$CountryCode)
data4 <- merge(data, data3, by.x=X, by.y=CountryCode)
names(data)
data4 <- merge(data, data3, by.x="X", by.y="CountryCode")
head(data4)
colnames(data4)
data4$Special.Notes
data4[data4$Special.Notes]
?grepl
data4[grepl(".*June.*", data4$Special.Notes)]
grepl(".*June.*", data4$Special.Notes)
data4[grepl(".*June.*", data4$Special.Notes),]
data4[grepl(".*June.*", data4$Special.Notes), "Special.Notes"]
data4[grepl(".*Fiscal.*end.*June.*", data4$Special.Notes), "Special.Notes"]
length(data4[grepl(".*Fiscal.*end.*June.*", data4$Special.Notes), "Special.Notes"])
package.install(quantmod)
install.package(quantmod)
install.packages(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
sampleTimes[grepl("^2012", sampleTimes)]
len(sampleTimes[grepl("^2012", sampleTimes)])
length(sampleTimes[grepl("^2012", sampleTimes)])
length(sampleTimes[grepl(".*2012.*", sampleTimes)])
length(sampleTimes[grepl("2012.*", sampleTimes)])
swirl()
library(swirl)
swirl()
?Devices
with(faithful, plot)
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
yxplot(Life.Exp ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, state, c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(4,1))
xyplot(Life.Exp ~ Income | region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, data=mpg)
swirl()
library(swirl)
swirl()
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis = "blue", col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par()$fg
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main="Wind and Ozone in NYC")
may = airquality[airquality$month=5,]
may <- airquality[airquality$month=5,]
may <- airquality[airquality$month==5,]
may <- airquality[airquality$Month==5,]
may <- subset(airquality, Month==5)
points(may$wind, may$Ozone, color="blue", pch=17)
points(may$Wind, may$Ozone, color="blue", pch=17)
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay <- subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", pch=(17,8), col=("blue", "red"), legend=("May", "Other Months"))
legend("topright", pch=c(17,8), col=c("blue", "red"), legend=c("May", "Other Months"))
?abline
abline(v=airquality$Wind, lty=2, lwd=2)
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=(1,2))
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(swirl)
swirl()
pwd
dir
cd ~/builds/datasciencecoursera
cd /home/deapfreze/builds/datasciencecoursera
load(plot1.R)
source(plot1.R)
/ource('/home/deapfreze/builds/datasciencecoursera/exploratory_data_analysis/hw1/plot1.R')
source('/home/deapfreze/builds/datasciencecoursera/exploratory_data_analysis/hw1/plot1.R')
setwd('/home/deapfreze/builds/datasciencecoursera/exploratory_data_analysis/hw1')
source('plot1.R')
source('plot1.R')
source('plot1.R')
source('plot1.R')
head data
head(data)
read.table("./household_power_consumption.txt")
read.table("./household_power_consumption.txt",header=T,sep=";")
source('plot1.R')
head(data)
data <- read.table("./household_power_consumption.txt", header=T, sep=";")
data[as.Date(data$Date) >= as.Date('2007-02-01') && as.Date(data$Date) <=  as.Date('2007-02-02'),]
head(data)
source('plot1.R')
source('plot1.R')
head(data)
as.Date(data$Date)
data <- read.table("./household_power_consumption.txt", header=T, sep=";")
as.Date(data$Date)
data[as.Date(data$Date) >= as.Date('2007-02-01') && as.Date(data$Date) <=  as.Date('2007-02-02'),]
data[strptime(data$Date) >= strptime('2007-02-01') && strptime(data$Date) <=  strptime('2007-02-02'),]
as.Date('2007-02-02')
source('plot1.R')
strptime('02/01/2007', '%d/%m/%Y')
source('plot1.R')
strptime('01/02/2007', '%d/%m/%Y')
data <- read.table("./household_power_consumption.txt", header=T, sep=";")
strptime(data$Date, '%d/%m/%Y')
source('plot1.R')
data <- read.table("./household_power_consumption.txt", header=T, sep=";")
data[strptime(data$Date, '%Y/%m/%d') >= strptime('01/02/2007', '%d/%m/%Y') && strptime(data$Date, '%Y/%m/%d') <=  strptime('02/02/2007', '%d/%m/%Y'),]
strptime(data$Date, '%Y/%m/%d') >= strptime('01/02/2007', '%d/%m/%Y')
strptime('01/02/2007', '%d/%m/%Y')
head data$Date
head(data$Date)
source('plot1.R')
data <- read.table("./household_power_consumption.txt", header=T, sep=";")
head(data)
tail(data)
data[strptime(data$Date, '%d/%m/%y') >= strptime('01/02/2007', '%d/%m/%Y') && strptime(data$Date, '%d/%m/%y') <=  strptime('02/02/2007', '%d/%m/%Y'),]
data[strptime(data$Date, '%d/%m/%y') >= strptime('01/02/2007', '%d/%m/%Y') && strptime(data$Date, '%d/%m/%y') <=  strptime('02/02/2007', '%d/%m/%Y'),]
data[strptime(data$Date, '%d/%m/%y') >= strptime('01/02/2007', '%d/%m/%Y') && strptime(data$Date, '%d/%m/%y') <=  strptime('02/02/2007', '%d/%m/%Y'),]
strptime(data$Date, '%d/%m/%Y')
strptime('02/02/2007', '%d/%m/%Y')
strptime(data$Date, '%d/%m/%Y') <=  strptime('02/02/2007', '%d/%m/%Y')
data$Date, '%d/%m/%Y') >= strptime('01/02/2007', '%d/%m/%Y')
head(strptime(data$Date, '%d/%m/%Y') >= strptime('01/02/2007', '%d/%m/%Y'))
strptime(data$Date, '%d/%m/%Y') >= strptime('01/02/2007', '%d/%m/%Y')
data[strptime(data$Date, '%d/%m/%Y') >= strptime('01/02/2007', '%d/%m/%Y')]
data[strptime(data$Date, '%d/%m/%Y') >= strptime('01/02/2007', '%d/%m/%Y'),]
data = data[(strptime(data$Date, '%d/%m/%Y') >= strptime('01/02/2007', '%d/%m/%Y') && strptime(data$Date, '%d/%m/%Y') <=  strptime('02/02/2007', '%d/%m/%Y')),]
data
data <- read.table("./household_power_consumption.txt", header=T, sep=";")
data[(strptime(data$Date, '%d/%m/%Y') >= strptime('01/02/2007', '%d/%m/%Y') && strptime(data$Date, '%d/%m/%Y') <=  strptime('02/02/2007', '%d/%m/%Y')),]
data[(strptime(data$Date, '%d/%m/%Y') >= strptime('01/02/2007', '%d/%m/%Y')),]
tail(data[(strptime(data$Date, '%d/%m/%Y') >= strptime('01/02/2007', '%d/%m/%Y')),])
data = data[(strptime(data$Date, '%d/%m/%Y') >= strptime('01/02/2007', '%d/%m/%Y') & strptime(data$Date, '%d/%m/%Y') <=  strptime('02/02/2007', '%d/%m/%Y')),]
dtaa
data
source('plot1.R')
data
hist(data, data$Global_active_power, xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
?hist
hist(data$Global_active_power, xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
hist(data$Global_active_power, xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
data$Global_active_power
hist(data$Global_active_power, xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
hist(data$Global_active_power, xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
hist(data$Global_active_power, xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
hist(data$Global_active_power, xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
hist(data$Global_active_power, xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
hist(data$Global_active_power, xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
hist(data$Global_active_power, xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
hist(data$Global_active_power, xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
hist(data$Global_active_power, xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
data
hist(data, data$Global_active_power, xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
hist(as.vector(data$Global_active_power), xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
hist(as.vector(data$Global_active_power), xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
hist(data$Global_active_power, xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
data$Global_active_power
hist(as.numeric(data$Global_active_power), xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red')
source('plot1.R')
dev.off()
source('plot1.R')
hist(as.numeric(data$Global_active_power), xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red', breaks=12)
hist(as.numeric(data$Global_active_power), xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red', breaks=12)
hist(as.numeric(data$Global_active_power), xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red', main="Global Active Power")
hist(as.numeric((as.character(data$Global_active_power)), xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red', main="Global Active Power")
;
hist(as.numeric(as.character(data$Global_active_power)), xlab='Global Active Power (kilowatts)', ylab='Frequency', col='red', main="Global Active Power")
?dev.copy
source('plot1.R')
source('plot1.R')
dev.ofF()
dev.off()
?line
head(data)
source('plot1.R')
source('plot2.R')
?line
source('plot2.R')
data$Time
source('plot2.R')
source('plot2.R')
line(strptime(data$Time, '%H:%M:%S'), as.numeric(as.character(data$Global_active_power)))
?line
line(data$Time, as.numeric(as.character(data$Global_active_power)))
plot(strptime(data$Time, '%H:%M:%S'), as.numeric(as.character(data$Global_active_power)))
source('plot2.R')
source('plot2.R')
data
source('plot2.R')
source('plot2.R')
strptime(data$Time, '%h:%M:%s')
strptime(data$Time, '%H:%M:%S')
source('plot2.R')
source('plot2.R')
source('plot2.R')
plot(data$Time, as.numeric(as.character(data$Global_active_power)), type='l', breaks=3, xlab='', ylab='Global Active Power (kilowatts)')
plot(data$Time, as.numeric(as.character(data$Global_active_power)), type='l', breaks=3, xlab='', ylab='Global Active Power (kilowatts)')
plot(data$Time, as.numeric(as.character(data$Global_active_power)), type='l', lw=1, xlab='', ylab='Global Active Power (kilowatts)')
plot(data$Time, as.numeric(as.character(data$Global_active_power)), type='l', lw=0.5, xlab='', ylab='Global Active Power (kilowatts)')
plot(data$Time, as.numeric(as.character(data$Global_active_power)), type='l', lw=0.1, xlab='', ylab='Global Active Power (kilowatts)')
plot(data$Time, as.numeric(as.character(data$Global_active_power)), type='l', lwd=0.1, xlab='', ylab='Global Active Power (kilowatts)')
plot(data$Time, as.numeric(as.character(data$Global_active_power)), type='l', lwd=0.1, xlab='', ylab='Global Active Power (kilowatts)')
plot(data$Time, as.numeric(as.character(data$Global_active_power)), type='l', lwd=0.5, xlab='', ylab='Global Active Power (kilowatts)')
plot(data$Time, as.numeric(as.character(data$Global_active_power)), type='l', xlab='', ylab='Global Active Power (kilowatts)')
source('plot2.R')
source('plot2.R')
source('plot2.R')
source('plot2.R')
data$Time
source('plot2.R')
plot(strptime(data$Time, 'H:M:S'), as.numeric(as.character(data$Global_active_power)), type='l', xlab='', ylab='Global Active Power (kilowatts)')
plot(strptime(data$Time, 'H:M:S'), as.numeric(as.character(data$Global_active_power)), type='l', xlab='', ylab='Global Active Power (kilowatts)')
plot(strptime(data$Time, '%H:%M:%S'), as.numeric(as.character(data$Global_active_power)), type='l', xlab='', ylab='Global Active Power (kilowatts)')
source('plot2.R')
plot(as.Time(strptime(data$Time, '%H:%M:%S')), as.numeric(as.character(data$Global_active_power)), type='l', xlab='', ylab='Global Active Power (kilowatts)')
plot(as.Time(strptime(data$Time, '%H:%M:%S')), as.numeric(as.character(data$Global_active_power)), type='l', xlab='', ylab='Global Active Power (kilowatts)')
source('plot2.R')
source('plot2.R')
source('plot2.R')
plot(as.Date(strptime(data$Date + ", " + data$Time, '%d/%m/%Y, %H:%M:%S')), as.numeric(as.character(data$Global_active_power)), type='l', xlab='', ylab='Global Active Power (kilowatts)')
source('plot2.R')
plot(as.Date(strptime('01/02/2007, ' + data$Time, '%d/%m/%Y, %H:%M:%S')), as.numeric(as.character(data$Global_active_power)), type='l', xlab='', ylab='Global Active Power (kilowatts)')
source('plot2.R')
source('plot2.R')
source('plot2.R')
source('plot2.R')
source('plot2.R')
source('plot2.R')
source('plot2.R')
data$dateTime
source('plot2.R')
source('plot2.R')
source('plot2.R')
source('plot2.R')
?points
source('plot2.R')
source('plot3.R')
? legend
source('plot3.R')
legend("topright", c("black", "red", "blue"), c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", col=c("black", "red", "blue"), legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
legend("topright", legend=c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), col=c("black", "red", "blue"), lty=c(1,1,1))
source('plot3.R')
source('plot4.R')
source('plot4.R')
source('plot4.R')
source('plot4.R')
